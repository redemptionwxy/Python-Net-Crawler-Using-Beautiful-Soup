### 正则表达式
"""
.  		表示任何单个字符
[]		字符集, 对单个字符给出取值范围				[abc]表示abc，[a-z]表示a到z单个字符
[^ ]	非字符集, 对单个字符给出排除范围			[^abc]非abc字符
* 		前一个字符0次或无限次拓展					[]
+ 		前一个字符1次或无限次拓展
?		前一个字符0次或1次拓展
|		左右表达式任意一个


{m}		扩展前一个字符m次
{m,n}	扩展前一个字符m至n次
^		匹配字符串开头
$ 		匹配字符串结尾
( )		分组标记，内部只能使用 | 操作符

\d		数字	 [0-9]
\w		单词字符 [A-Za-z0-9_]



re 库

re.search()	在一个字符串中搜索匹配正则表达式的第一个位置

re.match()	从一个字符串的开始位置起匹配正则表达式

re.findall() 搜索字符串，以列表形式返回全部能匹配的子串

re.split()	将一个字符串按照正则表达式匹配结果进行分割，返回列表类型

re.finditer()	搜索字符串，返回一个匹配结果的迭代类型

re.sub()		在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串

re.l		忽略大小写

re.L   		做本地化识别匹配

re.M  		多行匹配，影响 ^ 和 $

re.S 		使 . 匹配包括换行内的所有字符

re.U 		Unicode 解析字符，\w,\W,\b,\B

"""


import re
	

m = re.search("asb","ADDasb")  # search(规则，目标字符串)
#只找第一个AA
print(m)


m = re.findall("[A-Z]","ADDasb")
print(m)

m = re.findall("[A-Z]+","ADDasbSAdsaA")
print(m) 		##贪婪匹配，非贪婪加？

#	sub

print(re.sub("a","A","adsdsadsADdsa"))

#   用大 A 替换 a

# 正则表达式中字符串前加r ，不受转义字符影响


